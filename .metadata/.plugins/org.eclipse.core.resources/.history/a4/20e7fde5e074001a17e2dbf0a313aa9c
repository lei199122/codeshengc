package com.sxt.system.service.impl;

import com.sxt.system.domain.Permission;
import com.sxt.system.mapper.PermissionMapper;
import com.sxt.system.service.IPermissionService;
import com.sxt.system.utils.DataGridView;
import com.sxt.system.vo.PermissionVo;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;

import java.util.List;
import java.util.function.Consumer;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * <p>
 *  服务实现类
 * </p>
 *
 * @author LeiWei
 * @since 2020-03-27
 */
@Service
@Transactional
public class PermissionServiceImpl extends ServiceImpl<PermissionMapper, Permission> implements IPermissionService {
	
	private Log log = LogFactory.getLog(PermissionServiceImpl.class);
	
	@Override
	public List<Permission> queryAllPermission(PermissionVo permissionVo) {
		PermissionMapper permissionMapper = this.getBaseMapper();
		QueryWrapper<Permission> qw = new QueryWrapper<>();
		if(null != permissionVo) {
			qw.eq(StringUtils.isNotBlank(permissionVo.getType()), "type", permissionVo.getType());
			qw.eq(permissionVo.getAvailable() != null, "available", permissionVo.getAvailable());
			qw.like(StringUtils.isNotBlank(permissionVo.getTitle()), "title", permissionVo.getTitle());
		}else {
			log.info("permissionVo的参数为空");
		}
		qw.orderByAsc("ordernum");
		List<Permission> list = permissionMapper.selectList(qw);
		return list;
	}

	@Override
	public DataGridView loadAllPermission(PermissionVo permissionVo) {
		Page<Permission> page = new Page<>(permissionVo.getPage() ,permissionVo.getLimit());
		QueryWrapper<Permission> qw = new QueryWrapper<>();
		qw.eq(StringUtils.isNoneBlank(permissionVo.getType()), "type", permissionVo.getType());
		qw.eq(permissionVo.getAvailable() != null, "available", permissionVo.getAvailable());
		qw.like(StringUtils.isNoneBlank(permissionVo.getTitle()), "title", permissionVo.getTitle());
		qw.like(StringUtils.isNoneBlank(permissionVo.getPercode()), "percode", permissionVo.getPercode());
		
		qw.and(permissionVo.getId() != null, new Consumer<QueryWrapper<Permission>>() {
			
			@Override
			public void accept(QueryWrapper<Permission> t) {
				t.eq(permissionVo.getId() != null, "id" , permissionVo.getId())
				.or().
				eq(permissionVo.getId() != null, "pid", permissionVo.getId());
			}
		});
		qw.orderByAsc("ordernum");
		this.getBaseMapper().selectPage(page, qw);
		return new DataGridView(page.getTotal(), page.getRecords());
	}

	@Override
	public Integer queryPermissionMaxOrderNum() {
		
		return this.getBaseMapper().queryPermissionMaxOrderNum();
	}

	@Override
	public Permission addPermission(Permission permission) {
		this.baseMapper.insert(permission);
		return permission;
	}

	@Override
	public Permission updatePermission(Permission permission) {
		this.baseMapper.updateById(permission);
		return permission;
	}

	@Override
	public Integer queryPermissionCountByPid(Integer id) {
		
		return this.baseMapper.queryPermissionCountByPid(id);
	}

}
